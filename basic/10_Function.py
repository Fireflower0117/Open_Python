# 함수 (Function)
# ---- 학습목표 ----
#  ■ 함수의 장점을 설명할수있다.
#  ■ 함수를 정의내리고 사용할수있다.
#  ■ 함수에 포함된 return문의 의미를 설명할수있다.

# - 여러번 재사용할수있는 코드는 묶어서 함수로 만들어 놓는것이 좋다.
# - 함수를 만들면 가독성이 높아지고 재사용성으로 인해 효율적인 코딩이 가능하다.
#    가독성   => 소스코드를 작성하거나 읽을때 이해가 쉽고 보기좋게 만드는 행위
#    재사용성 => 함수를 만들고난후, 같은 코드를 다시 작성할 필요성이 없이 기존에 만든 ㅎ마수를
#               호출만 하면 됨으로 중복코드를 줄일수있다.

print();print()
print("=== 함수정의방법 " , "="* 60)
# def 함수이름(매개변수1, 매개변수2, ....., 매개변수n) :
#       함수내부수행로직1
#       함수내부수행로직2
#       [return 반환값]

#   ex)  def fnMultiplied(a , b) :
#          pass
#          return a * b

# - 'def'는 함수를 만들겠다고 선언하는 키워드
#  '함수이름'은 변수명을 만드는 규칙과동일 (식별자 규칙에 따라 가독성있게 작성)
#  '매개변수1', '매개변수2', ....  은 ㅎ마수가 실행하는데 필요한 정보를 받는 매개변수들의 나열 (입력받는부분)
#  def 함수이름() 뒤에는 반드시 ':'을 사용하여 함수의 수행로직 블록이 시작됨을 알림
#  'return' 키워드는 반환값이 있을때 선언하는 키워드 , 필수키워드는 아님

# - 'pass' 구문은 함수및 클래스에서 아무런 동작도 수행하지 않음을 나타낸다.
#    아무일도 하지않는 함수, 모듈, 클래스 등을 만들어야 할떄 사용한다.

def fnSimple() :
    pass

print('fnSimple() : ', fnSimple())

print();print()
print("=== 매개변수도 있고 반환도 있는 함수 " , "="* 40)
# - 함수를 정의내리고 난 후, 함수를 정의한 코드 아랠부분에서 함수를 호출할수있다.
# - 함수의 매개변수는 함수의 입력으로서 함수 호출시 괄호 안에 기입한 값을 받아들여 저장한다.
# - reutrn 문은 두가지 의미를 가진다.
#    1) 값의 반환
#    2) 함수의 종료

def fnAbs(number) :
    if number < 0 :
        number = -number
    return number

print('-3의 절대값 구하기 : ', fnAbs(-3))
print('10의 절대값 구하기 : ', fnAbs(10))
temp = fnAbs(-9) / 3 * fnAbs(20) + 3 + fnAbs(-19)
print('계산결과 : ', temp)

print();print()
print("=== 함수내용만 있는 함수 " , "="* 60)
# - 함수를 정의할때 입력이 필요 없다면 매개변수를 생략하고, 함수호출시에도 빈칸으로 호출한다.
# - 함수를 정의할때 실행하고 반환할 결과값이 없으면 생락할수 있다.
# - return문이 없을땐 함수 블록의 마지막 문장이 함수 블록의 끝을 의미한다.

def fnSayHello() :
    print('안녕~~!!')
    print('만나서 반가워..  좋은하루 보내길 바란다.')

fnSayHello()
fnSayHello()

print();print()
print("=== 매개변수만 있는 함수 " , "="* 60)
# - 함수에 입력이 필요하면 함수를 정의할때 매개변수를 넣고, 함수호출시에 값을 넣어 호출한다
# - 매개변수는 함수의 입력이며, return 값은 함수의 출력이라 할수있다.
# - 함수에 매개변수를 넣을것인지, return값을 설정할것인지 판단은 개발자의 몫이다.

def fnSignGood(when) :
    if when == 1 :
        print("Good Morning")
    elif when == 2 :
        print("Good Afternoon")
    elif when == 3 :
        print("Good Evening")
    else :
        print("Good Night")

fnSignGood(1)
fnSignGood(2)
fnSignGood(3)
fnSignGood(10)

